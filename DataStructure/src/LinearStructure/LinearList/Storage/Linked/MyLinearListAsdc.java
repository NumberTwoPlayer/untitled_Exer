package LinearStructure.LinearList.Storage.Linked;

/**
 * @author Email 3394427855@qq.com
 * @version 2022/10/22 15:10
 * @uesr 刘梹晨
 */
public class MyLinearListAsdc {
    /**
     * 获取表长
     *
     * @return 返回链表长度
     */
    // node指向表的第一个结点
    // 计数器，用来统计链表结点个数，初始为0个
    // 结点为null时表示没有下一个结点了，跳出循环，返回链表长度
    // 当前node指向第j个结点

    /**
     * 按序号查找值
     *
     * @param i          查找的序号
     * @param sourceNode 当前要操作的链表
     * @return 如果查找成功返回该结点，否则返回null
     */
    // 计数器，统计当前是第几个结点
    // 循环的条件是结点不能为null并且j必须小于i
    // 判断计数器的值是否等于要查询的位序，如果是返回结点否则返回null
    // 当前node指向第j个结点

    /**
     * 按值查找
     *
     * @param obj        要查找的值
     * @param sourceNode 要操作的链表
     * @return 如果查找成功返回该值所在结点
     */
    // 循环判断结点的值是否与要查询的值相等，相等则返回当前结点

    /**
     * 在指定位置插入
     *
     * @param i          要插入的位序
     * @param data       要插入的数据
     * @param sourceNode 要操作的链表
     * @return 返回插入成功的链表
     * @throws Exception 抛出异常
     */
    // p指的是要插入的位置之前的结点，s指的是要新插入的结点
    // 如果新结点要插在表头
    // 申请新结点
    // 设置新结点的数据
    // 设置新节点的指针（下一个结点）的位置
    // 查找第(i-1)个结点，即查找要插入的位置的前一个结点
    // 判断查询到的结点是否为null
    // 申请新结点
    // 设置新结点的数据
    // 设置新结点的指针（下一个结点的位置）为查询到的结点的指针
    // 将要插入位置的前一个结点的指针指向当前要添加的新结点

    /**
     * 删除指定位置的数据
     *
     * @param i          指定的位序
     * @param sourceNode 链表
     * @return 返回删除成功的链表
     * @throws Exception 抛出异常
     */
    // p指的是要删除的结点之前的结点，s指的是要删除的结点
    // 如果要删除第一个结点
    // 从链表中删除，即指针指向了第一个结点的下一个结点
    // 查询要删除结点的上一个节点
    // 将s指向第i个结点，即获取要删除的节点（通过上一个节点的指针获取要删除的节点的位置）
    // 从链表中删除

    /**
     * 打印该链表的所有结点数据
     *
     * @param node 链表
     */
    //主函数
    // 作头结点使用
    // 插入一个结点，位序是1
    // 插入一个结点，位序非1
    // 打印链表的长度
    // 按序号查找
    // 按值查找
    // 删除指定位序的结点，比如删除第二个结点
    }

